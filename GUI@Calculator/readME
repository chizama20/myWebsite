Calculator Project
This project is a simple calculator application built using Python's customtkinter library. The calculator features a sleek and modern GUI that supports both light and dark modes, automatically adjusting based on the system's theme. The app includes basic arithmetic operations, percentage calculation, and the ability to invert the sign of a number.

FEATURES

Basic Arithmetic: Perform addition, subtraction, multiplication, and division.
Percentage Calculation: Easily calculate percentages.
Sign Inversion: Quickly invert the sign of a number with the ± button.
Responsive Design: The interface is designed to fit well on different screen sizes.


PROJECT STRUCTURE

As I'm learning about classes in Python, I’ve organized the project into different files and directories to keep everything clean and understandable. Here’s how it’s set up:

calculator.py:
This file is where the main calculator application lives. It contains the Calculator class, which is the core of the project.

Calculator Class:
The Calculator class is something I’ve been working on as part of my learning journey with classes in Python. It inherits from customtkinter.CTk (which is a custom Tkinter class), and it’s responsible for creating the main window of the calculator.

Button Class:
This is the basic button that I created, which other buttons inherit from. It handles general button properties like text, color, and what happens when you click it.

NumButton Class:
This class is a specialized version of Button for the number buttons on the calculator. It’s designed to handle the display of numbers when pressed.

MathButton Class:
This one is for the math operation buttons (like +, -, etc.). It also inherits from Button but is tailored to handle mathematical operations.

ImageButton Class:
This is another extension of Button, but it includes images (for buttons like +/- and ÷), making the calculator look more visually appealing.

settings.py:
This file is where all the settings and configurations for the calculator are stored. It includes things like button positions, sizes, and colors. By separating these settings, it’s easier to tweak the design without digging into the main code.


FUTURE IMPROVEMENTS

Light & Dark mode: Under works currently
Advanced Functions: Adding support for scientific functions like trigonometry and logarithms. (huge maybe)
History: Implementing a feature to keep track of previous calculations.(still looking for ways to impliment this)
